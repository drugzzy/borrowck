use intern::{self, InternedString};
use repr::*;
use std::str::FromStr;

grammar;

pub Func: Func = {
    <structs:StructDecl*>
        <regions:RegionDecls>
        <decls:VarDecl*>
        <blocks:BasicBlockData+>
        <asserts:(Comment* <Assertion>)*> =>
    {
        Func {
            structs: structs,
            decls: decls,
            regions: regions,
            data: blocks.into_iter()
                        .map(|block| (block.name, block))
                        .collect(),
            assertions: asserts,
        }
    }
};

StructDecl: StructDecl = {
    Comment* "struct" <n:StructName> <p:Angle<StructParameter>> "{"
        <f:Comma<FieldDecl>>
    "}" => {
        StructDecl {
            name: n,
            parameters: p,
            fields: f,
        }
    }
};

FieldDecl: FieldDecl = {
    <name:FieldName> ":" <ty:Ty> => FieldDecl { <> },
};

StructParameter: StructParameter = {
    <md:"may_dangle"?> <kv:KindVariance> => StructParameter {
        kind: kv.0,
        variance: kv.1,
        may_dangle: md.is_some(),
    }
};

KindVariance: (Kind, Variance) = {
    "'+" => (Kind::Region, Variance::Co),
    "'-" => (Kind::Region, Variance::Contra),
    "'=" => (Kind::Region, Variance::In),
    "+" => (Kind::Type, Variance::Co),
    "-" => (Kind::Type, Variance::Contra),
    "=" => (Kind::Type, Variance::In),
};

#[inline]
RegionDecls: Vec<RegionDecl> = {
    () => vec![],
    Comment* "for" <Angle<RegionDecl>> ";",
};

RegionDecl: RegionDecl = {
    <name:RegionName> => RegionDecl { name, outlives: vec![] },
    <name:RegionName> ":" <outlives:List<"+", RegionName>> => RegionDecl { name, outlives },
};

VarDecl: VariableDecl = {
    Comment* "let" <n:Variable> ":" <t:Ty> ";" => VariableDecl {
        var: n,
        ty: t,
    }
};

Ty: Box<Ty> = {
    "&" <Region> <BorrowKind> <Ty> => Box::new(Ty::Ref(<>)),
    "(" ")" => Box::new(Ty::Unit),
    <StructName> <Angle<TyParameter>> => Box::new(Ty::Struct(<>)),
    Usize => Box::new(Ty::Bound(<>)),
};

Region: Region = {
    RegionName => Region::Free(<>),
    r"'[0-9]+" => Region::Bound(usize::from_str(&<>[1..]).unwrap()),
};

TyParameter: TyParameter = {
    Region => TyParameter::Region(<>),
    Ty => TyParameter::Ty(<>),
};

BasicBlockData: BasicBlockData = {
    Comment* "block" <name:BasicBlock> "{"
        <actions:Action*>
        Comment*
        <gotos:("goto" <BasicBlock*> ";" Comment*)?>
    "}" => {
        BasicBlockData {
            name: name,
            actions: actions,
            successors: gotos.unwrap_or(vec![]),
        }
    }
};

Action: Action = {
    Comment* <kind:ActionKind> <e:ErrorComment?> => Action {
        kind,
        should_have_error: e,
    },
};

// 简化版的rust语法，建立了语句到ActionKind的映射关系
ActionKind: ActionKind = {
    <a:Path> "=" "use" "(" <p:Comma<Path>> ")" ";" => ActionKind::Init(a, p),
    <Path> "=" "&" <RegionName> <BorrowKind> <Path> ";" => ActionKind::Borrow(<>),
    <a:Path> "=" <b:Path> ";" => ActionKind::Assign(a, b),
    <c:Constraint> ";" => ActionKind::Constraint(c),
    "use" "(" <v:Path> ")" ";" => ActionKind::Use(v),
    "drop" "(" <v:Path> ")" ";" => ActionKind::Drop(v),
    "StorageDead" "(" <v:Variable> ")" ";" => ActionKind::StorageDead(v),
    ";" => ActionKind::Noop,
};

BorrowKind: BorrowKind = {
    "mut" => BorrowKind::Mut,
    () => BorrowKind::Shared,
};

Path: Box<Path> = {
    Path1,
    "*" <Path> => Box::new(Path::Extension(<>, FieldName::star())),
};

Path1: Box<Path> = {
    "(" <Path> ")",
    Variable => Box::new(Path::Var(<>)),
    <Path1> "." <FieldName> => Box::new(Path::Extension(<>)),
};

Constraint: Box<Constraint> = {
    Constraint1 => Box::new(<>),
};

Constraint1: Constraint = {
    "forall" "<" <v:Comma1<RegionName>> ">" <c:Constraint> => Constraint::ForAll(v, c),
    "exists" "<" <v:Comma1<RegionName>> ">" <c:Constraint> => Constraint::Exists(v, c),
    "if" "(" <v:Comma1<OutlivesConstraint>> ")" <c:Constraint> => Constraint::Implies(v, c),
    "{" <c:Comma1<Constraint1>> "}" => Constraint::All(c),
    OutlivesConstraint => Constraint::Outlives(<>),
};

OutlivesConstraint: OutlivesConstraint = {
    <sup:RegionName> ":" <sub:RegionName> => OutlivesConstraint { sup, sub },
};

Variable: Variable = {
    <n:Ident> => Variable { name: n }
};

Assertion: Assertion = {
    "assert" <n:RegionName> "==" <r:RegionLiteral> ";" => Assertion::Eq(n, r),
    "assert" <p:Point> "in" <n:RegionName> ";" => Assertion::In(n, p),
    "assert" <p:Point> "not" "in" <n:RegionName> ";" => Assertion::NotIn(n, p),
    "assert" <v:Variable> "live" "at" <b:BasicBlock> ";" => Assertion::Live(v, b),
    "assert" <v:Variable> "not" "live" "at" <b:BasicBlock> ";" => Assertion::NotLive(v, b),
    "assert" <n:RegionName> "live" "at" <b:BasicBlock> ";" => Assertion::RegionLive(n, b),
    "assert" <n:RegionName> "not" "live" "at" <b:BasicBlock> ";" => Assertion::RegionNotLive(n, b),
};

RegionName: RegionName = {
    "'_" => RegionName::fresh(),
    r"'[a-zA-Z_]\w*" => RegionName { name: intern::intern(<>) }
};

StructName: StructName = {
    r"[a-zA-Z_]\w*" => StructName { name: intern::intern(<>) }
};

FieldName: FieldName = {
    r"[a-zA-Z_]\w*" => FieldName { name: intern::intern(<>) }
};

Point: Point = {
    <b:PointName> "/" <a:Usize> => Point { block: b, action: a }
};

PointName: PointName = {
    BasicBlock => PointName::Code(<>),
    RegionName => PointName::SkolemizedEnd(<>),
};

RegionLiteral: RegionLiteral = {
    "{" <p:Comma<Point>> "}" => RegionLiteral { points: p },
};

Usize: usize = {
    r"[0-9]+" => usize::from_str(<>).unwrap()
};

BasicBlock: BasicBlock = {
    Ident => BasicBlock { name: <> }
};

Ident: InternedString = {
    r"[a-zA-Z_]\w*" => intern::intern(<>)
};

Comma<T> = List<",", T>;

Comma1<T> = List1<",", T>;

List<S, T>: Vec<T> = {
    () => vec![],
    <List1<S, T>> S?,
};

List1<S, T>: Vec<T> = {
    T => vec![<>],
    <v:List1<S, T>> S <e:T> => {
        let mut v = v;
        v.push(e);
        v
    },
};

Comment: () = {
    r"//" => (),
    r"//[^!].*" => (),
};

ErrorComment: ExpectedError = {
    <s:r"//!.*"> => ExpectedError { string: s["//!".len()..].trim().to_string() },
};

Angle<T>: Vec<T> = {
    () => vec![],
    "<" <Comma<T>> ">",
};
